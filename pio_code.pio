.program PMTcounter

start:
    set pins, 16    ; Reset(LE-> L, ~CE-> L, TLCD-> L, ~PE->L, MR-> H = 00001)
    set pins, 10    ; Counter hold(LE-> L, ~CE-> H, TLCD-> L, ~PE->H, MR-> L = 01010)
    wait 1 gpio 16  ; wait for PMT trigger (from FPGA)
    mov Y X         ; load the integration time from the X register
.wrap_target
    set pins, 8     ; Start counter(LE-> L, ~CE-> L, TLCD-> L, ~PE->H, MR-> L = 00010)
    in pins, 8      ; Reads the latch (we use one integration cycle to read the last latched value)
integrate:
    nop [7]             ; Keeps integrating
    jmp y-- integrate   ; as long as user requests (units of 7 clocks)
    set pins, 27    ; Counter hold + latching(LE-> H, ~CE-> H, TLCD-> L, ~PE->H, MR-> H = 11011) Wait 1 cycle here as I suspect the latch might miss the OE signal
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void PMTcounter_program_init(PIO pio, uint sm, uint offset, uint IN_pin_base, uint NpinsIN, uint OUT_pin_base, uint NpinsOUT, uint base_set, uint N_set_pins, uint base_sideset, uint word_size, float div, uint integration_time) {

    pio_sm_config c = PMTcounter_program_get_default_config(offset);

    // --- This part to set the user integration time

    // Set value of OSR register
    pio_sm_put(pio, sm, integration_time);
    pio_sm_exec(pio, sm, pio_encode_pull(false, true));

    // Copy OSR to the Y register
    pio_sm_exec(pio, sm, pio_encode_mov(pio_x, pio_osr));

    // --- 

    // --- INIT SET PINS ---
    for(uint i=base_set; i<base_set+N_set_pins; i++) {
        pio_gpio_init(pio, i);
    }
    pio_gpio_init(pio, base_sideset);
    
    pio_sm_set_consecutive_pindirs(pio, sm, OUT_pin_base, NpinsOUT, true);


    // --- SET SIDESET PINS ---
    //sm_config_set_set_pins(&c, base_sideset, 1);
    //sm_config_set_sideset_pins(&c, base_sideset);

    // --- SET SET PINS ---
    sm_config_set_set_pins(&c, base_set, 5);
    

    // --- SET IN PINS ---
    sm_config_set_in_pins (&c, IN_pin_base);
    //pio_sm_set_consecutive_pindirs(pio, sm, IN_pin_base, NpinsIN, false);


    // --- SET CLK DIV ---
    sm_config_set_clkdiv(&c, div);

    // Note that we may push at a < 32 bit threshold if pin_count does not
    // divide 32. We are using shift-to-right, so the sample data ends up
    // left-justified in the FIFO in this case, with some zeroes at the LSBs.
    sm_config_set_in_shift(&c, true, true, word_size);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    pio_sm_init(pio, sm, offset, &c);
}

%}